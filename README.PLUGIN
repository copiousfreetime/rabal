How to Develop a Plugin for Rabal

== OVERVIEW

Rabal uses the the +gem_plugin+ gem to manage its plugins.  A basic
plugin is a single class that inherits from Rabal::Plugin::Foundation.

A plugin has +parameters+ a +description+ and a flag +use_always+ which
indicates if the plugin's use is required. 

== Basic Plugin - only directory/file structure

    1: require 'rabal/plugin/foundation'
    2:  module Rabal
    3:     module Plugin
    4:         class Test < Rabal::Plugin::Base "/rabal/test"
    5:             description "Add a Test::Unit framework."
    6:         end
    7:     end
    8:  end

This is the 'test' plugin that ships with rabal.  It shows all that is required
for a basic plugin that only has a directory/file structure associated
with it.

    test/
    test/rabal.project_test.rb.erb
    test/test_helper.rb.erb

This is the directory template associated with the test plugin.  Lets
walk through the code line by line.

# every plugin depends upon Rabal::Plugin::Foundation
# Toplevel module for Rabal
# Rabal module containing all plugins 
# Declare a *Test* plugin that is registered as "/rabal/test" in the
  plugin registry.  It is *critical* that your plugin be delcared in
  this manner.  There is great Ruby voodoo happening here.  All your
  Rabal plugins muest be declared as inheriting from Rabal::Plugin::Base
  with the registration *path* following. You will probably want to use
  "/mypluginproject/pluginname" as the registration path.
# describe your plugin

Associated with your plugin is a directory tree.  This tree should be
located in the +resources+ directory under the root of your gem.  This
will enable the resources to be named and accessed via the
*resource_by_name* method available from within your plugin.

In your directory tree, if *rabal.project* is in the file or directory
path it will be replaced with the project name used in the *rabal*
command.

The parameters of your plugin are available from within the ERB template
to use in generating the basic files.

== Plugin with Parameters

== Plugin with decision making 

== Packaging

== Trees
    ./example/lib
    ./example/lib/example
    ./example/lib/example.rb
    ./example/lib/example/version.rb
    ./example/CHANGES
    ./example/INSTALL
    ./example/README
    ./example/Rakefile

Rabal currently ships with plugins for:

* core - core functionality and baseline information need by every  project
* license - indicate under what license your project is released.  Has
  templates for BSD, GPL, LGPL, MIT and Ruby License
* bin - command line application
* spec - an RSpec starting point
* test - a Test::Unit starting point

You are highly encouraged to write your own plugins and distribute them.
See the README.PLUGIN for information on how to develop your own.

== EXAMPLE

  % rabal --use-all --core-author="Ruby Programmer" --core-email="rp@example.com"  --license-flavor=Ruby myproj
  [...]
  % find ./myproj
  ./myproj/
  ./myproj/LICENSE
  ./myproj/COPYING
  ./myproj/README
  ./myproj/lib
  ./myproj/lib/myproj
  ./myproj/lib/myproj/version.rb
  ./myproj/lib/myproj.rb
  ./myproj/Rakefile
  ./myproj/INSTALL
  ./myproj/CHANGES
  ./myproj/spec
  ./myproj/spec/spec_helper.rb
  ./myproj/spec/myproj_spec.rb
  ./myproj/bin
  ./myproj/bin/myproj

== SYNOPSIS

    NAME
      rabal v0.0.1

    SYNOPSIS
      rabal project [options]+

    DESCRIPTION
      Ruby Architecture for Building Applications and Libraries.
      
      Rabal is a command line application for bootstrapping, packaging and
      distributing ruby projects.

    GLOBAL OPTIONS
      --directory=directory, -d          - The directory in which to create the 
                                           project directory. 
      --help, -h                       
      --logfile=logfile, -l              - The location of the logfile 
      --use-all, -a                      - Use all available plugins. 
      --verbosity=verbosity, -v          - One of : DEBUG, INFO, WARN, ERROR, 
                                           FATAL, ANY 
      --version, -V                      - Display the version number 

    AVAILABLE MODULES
      Force any module to be used by giving the --use-[modulename] option. 
      Modules with a '*' next to them are always used. 
      
         bin (/rabal/bin)           - Add a command line application. 
        *core (/rabal/core)         - The core functionality and baseline 
                                      information needed by every project. 
        *license (/rabal/license)   - Indicate under what license your project is 
                                      released. 
         spec (/rabal/spec)         - Add an RSpec framework. 
         test (/rabal/test)         - Add a Test::Unit framework. 

    MODULE OPTIONS - BIN
      No options available

    MODULE OPTIONS - CORE
      --core-author=[core-author]        - Author of the project 
      --core-email=[core-email]          - Email address of the author 

    MODULE OPTIONS - LICENSE
      --license-flavor=[license-flavor]  - Flavor of License for your project: 
                                           BSD, GPL, LGPL, MIT, Ruby 

    MODULE OPTIONS - SPEC
      No options available

    MODULE OPTIONS - TEST
      No options available

    AUTHOR
      Jeremy Hinegardner <jeremy@hinegardner.org>


== REQUIREMENTS
=== For running
* main
* gem_plugin

=== For development
* rake
* rspec
* rcov

== CREDITS

rabal is inspired by:

* Cabal - http://www.haskell.org/cabal/
* Hoe - http://seattlerb.rubyforge.org/hoe/
* Conversations with Bruce Williams - http://codefluency.com/

== LICENSE:

Released under the same conditions as Ruby.  See LICENSE and COPYING

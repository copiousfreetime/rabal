== Things To Do and Things that are Done
=== You're Dropping the Ball Here.
* fix templates to use GEM_SPEC and Configuration

* add in support for generating a key for your project and signing your gem.

* build plugins for all the items necessary for deployment etc.
* use a configuration file for defaults that are always used.
* add in Autotest Tasks 

* commands ?
** add
** update - have a magic number for a template, know if its an old version or not.
** lint 

* SCM Support for:
** Initialization, first setup
** Adding to and modification of the 'ignore' file (.boring, .cvsignore svn:ignore, etc)
** Adding tree's to the project
** tagging the project with a release

=== Accomplishments!

* implement show_files
* split toplevel rake file out so that is tis nothing more than a 'require'
* all tasks moved to the task directory
* rename require'd rake files to .rake
* when there are ERB Errors, present that in an effective manner
* change capitalize to camelize in class names in templates
* update Rakefiles with tasks
** implement namespace 'site' tasks
** how to deal with additional rake tasks for sub directories
** spec
** testunit
** update rubyforge task to check and see if the current version
   already exists.
** update main clobber task to depend on all other :clobber* tasks

* highline prompting for items that are not found but required.
* Factor out meta information, subclass Gem::Specification 
* remove files from consideration that end in ~

* Use GemPlugin
** manage built-in plugins
** manage gem based plugins
** maange resources

* Base plugins
** bin
** core
** license
** spec
** test
** ext

* use ara's main gem
** --use-all 
** rework --help so it 
   plugins and then dump the to the screen?
** break --help up into sections ?  GENERAL  PLUGINS(listing all
   plugins) and then subsection for each plugin?
* Each plugin should designate its 'parameters and a brief description'
* rabal should be a GemPluginManager
** figure out plugin namespaces '/tree/builtin/base' etc.
** move tree's to be in directories based on resource matching their namespace
** bootstrap builtin to be Gem even if not, this really is only for running in-scm
* allow for insertion into project tree at an arbitrary path
* switch to Hash for children to allow for path access to data
* Tree namespaces
* cascade data access up the tree, method_missing
* Tree processing
** enter Tree
** do node thing
** process child Tree
** leave Tree
